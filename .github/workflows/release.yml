name: Publicar

on:
  workflow_dispatch

env:
  COMMIT_USER_NAME: github-actions
  COMMIT_USER_EMAIL: noreply@github.com

jobs:
  prepare-variables:
    uses: ./.github/workflows/versions.yml
  build:
    runs-on: ubuntu-latest
    needs: prepare-variables
    env:
      RELEASE_VERSION: ${{ needs.prepare-variables.outputs.releaseVersion }}
      NEXT_MINOR_VERSION: ${{ needs.prepare-variables.outputs.nextMinorVersion }}
      NEXT_PATCH_VERSION: ${{ needs.prepare-variables.outputs.nextPatchVersion }}
      X_VERSION: ${{ needs.prepare-variables.outputs.xVersion }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: Generate a token
        id: generate_token
        uses: tibdex/github-app-token@b62528385c34dbc9f38e5f4225ac829252d1ea92
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - uses: actions/checkout@v3
        with:
          token: ${{ steps.generate_token.outputs.token }}
      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'
          cache: 'maven'
      - name: Configura usuário do Git
        run: |
          git config user.name $COMMIT_USER_NAME
          git config user.email $COMMIT_USER_EMAIL
      - name: Lançar versão e iniciar proxíma versão menor
        if: ${{ github.ref_name == github.event.repository.default_branch }}
        run: |
          mvn -B release:prepare -DdevelopmentVersion=$NEXT_MINOR_VERSION-SNAPSHOT
          mvn -B release:perform
        env:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Lançar versão e iniciar proxíma versão de correção
        if: ${{ startsWith(github.ref_name, 'release/' )}}
        run: |
          mvn -B release:prepare -DdevelopmentVersion=$NEXT_PATCH_VERSION-SNAPSHOT
          mvn -B release:perform
        env:
          GITHUB_TOKEN: ${{ github.token }}


      - name: Push
        run: |
          git push origin v$RELEASE_VERSION
          git push


      - run: mkdir artifacts
      - name: Construir Artefatos
        run: mvn -B package --file pom.xml dependency:copy -Dartifact=\${project.groupId}:\${project.artifactId}:$RELEASE_VERSION -DoutputDirectory=artifacts
      - name: Criar Release
        id: create_release
        run: gh release create v$RELEASE_VERSION artifacts/*.jar --title=v$RELEASE_VERSION --generate-notes --verify-tag
        env:
          GH_TOKEN: ${{ github.token }}
